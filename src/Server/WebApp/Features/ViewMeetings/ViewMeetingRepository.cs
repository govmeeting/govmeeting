using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using Newtonsoft.Json;
using System.IO;
using GM.WebApp.Services;
using Microsoft.Extensions.Options;
using GM.WebApp.Features.Shared;
using System.Globalization;
using Govmeeting.Backend.Model;
using Webapp.Features.Govbodies;
using GM.WebApp.Features.Meetings;

namespace GM.WebApp.Features.Viewmeetings
{
    // This is a "repository" of "viewable" transcripts. Viewable transcripts are the JSON files generated by the last step in the 
    // processing, the adding of tags. They are named "T4-tagged.json", meaning they completed step 4 of the processing.
 
    public class ViewMeetingRepository : IViewMeetingRepository
    {
        private const string STEP4_BASE_NAME = "T4-tagged";
        private const string EXTENSION = "json";

        string DatafilesPath;
        string TestdataPath;
        IMeetingWorkFolder meetingWorkFolder;

        public ViewMeetingRepository(ISharedConfig config, IMeetingWorkFolder _meetingWorkFolder)
        {
            DatafilesPath = config.DatafilesPath;
            TestdataPath = config.TestdataPath;
            meetingWorkFolder = _meetingWorkFolder;
        }

        public MeetingView Get(long meetingId)
        {
            string path = meetingWorkFolder.GetPath(meetingId);

            // Todo-g - Remove later - For development: If the data is not in Datafiles folder, copy it from testdata.
            UseTestData.CopyIfNeeded(path, DatafilesPath, TestdataPath);

            string latestCopy = Path.Combine(DatafilesPath, path, STEP4_BASE_NAME + "." + EXTENSION);

            if (File.Exists(latestCopy))
            {
                return GetViewMeetingByPath(latestCopy);
            }
            else
            {
                return null;
            }
        }

        private MeetingView GetViewMeetingByPath(string path)
        {
            string meetingString = FileSystem.Readfile(path);
            if (meetingString != null)
            {
                MeetingView meeting = JsonConvert.DeserializeObject<MeetingView>(meetingString);
                return meeting;
            } else
            {
                return null;
            }
        }
    }
}
