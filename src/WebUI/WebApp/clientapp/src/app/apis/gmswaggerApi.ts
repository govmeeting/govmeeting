/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export module gmswagger {
export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class VideoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    get(filename: string | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Video/{filename}";
        if (filename === undefined || filename === null)
            throw new Error("The parameter 'filename' must be defined.");
        url_ = url_.replace("{filename}", encodeURIComponent("" + filename));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class TestapiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    get(testId: number): Observable<string> {
        let url_ = this.baseUrl + "/api/Testapi/{testId}";
        if (testId === undefined || testId === null)
            throw new Error("The parameter 'testId' must be defined.");
        url_ = url_.replace("{testId}", encodeURIComponent("" + testId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class ViewMeetingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    get(meetingId: number): Observable<ViewMeetingDto> {
        let url_ = this.baseUrl + "/api/ViewMeeting/{meetingId}";
        if (meetingId === undefined || meetingId === null)
            throw new Error("The parameter 'meetingId' must be defined.");
        url_ = url_.replace("{meetingId}", encodeURIComponent("" + meetingId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ViewMeetingDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ViewMeetingDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ViewMeetingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ViewMeetingDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ViewMeetingDto>(<any>null);
    }

    put(meetingId: number, meetingId: number | undefined, govbodyName: string | null | undefined, locationName: string | null | undefined, date: string | null | undefined, topics: ViewMeetingTopicDto[] | null | undefined, speakers: ViewMeetingSpeakerDto[] | null | undefined, sections: ViewMeetingSectionDto[] | null | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/ViewMeeting/{meetingId}?";
        if (meetingId === undefined || meetingId === null)
            throw new Error("The parameter 'meetingId' must be defined.");
        url_ = url_.replace("{meetingId}", encodeURIComponent("" + meetingId));
        if (meetingId === null)
            throw new Error("The parameter 'meetingId' cannot be null.");
        else if (meetingId !== undefined)
            url_ += "MeetingId=" + encodeURIComponent("" + meetingId) + "&";
        if (govbodyName !== undefined && govbodyName !== null)
            url_ += "GovbodyName=" + encodeURIComponent("" + govbodyName) + "&";
        if (locationName !== undefined && locationName !== null)
            url_ += "LocationName=" + encodeURIComponent("" + locationName) + "&";
        if (date !== undefined && date !== null)
            url_ += "Date=" + encodeURIComponent("" + date) + "&";
        if (topics !== undefined && topics !== null)
            topics && topics.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Topics[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
        			}
            });
        if (speakers !== undefined && speakers !== null)
            speakers && speakers.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Speakers[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
        			}
            });
        if (sections !== undefined && sections !== null)
            sections && sections.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Sections[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }
}

@Injectable()
export class EditMeetingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    get(meetingId: number, part: number): Observable<EditMeetingDto> {
        let url_ = this.baseUrl + "/api/EditMeeting/{meetingId}/{part}";
        if (meetingId === undefined || meetingId === null)
            throw new Error("The parameter 'meetingId' must be defined.");
        url_ = url_.replace("{meetingId}", encodeURIComponent("" + meetingId));
        if (part === undefined || part === null)
            throw new Error("The parameter 'part' must be defined.");
        url_ = url_.replace("{part}", encodeURIComponent("" + part));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<EditMeetingDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<EditMeetingDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<EditMeetingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditMeetingDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EditMeetingDto>(<any>null);
    }

    post(value: EditMeetingDto, meetingId: number, part: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/EditMeeting/{meetingId}/{part}";
        if (meetingId === undefined || meetingId === null)
            throw new Error("The parameter 'meetingId' must be defined.");
        url_ = url_.replace("{meetingId}", encodeURIComponent("" + meetingId));
        if (part === undefined || part === null)
            throw new Error("The parameter 'part' must be defined.");
        url_ = url_.replace("{part}", encodeURIComponent("" + part));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }
}

@Injectable()
export class GovLocationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    create(command: CreateGovLocationCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/GovLocation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get(location: string | null): Observable<GovLocationDto[]> {
        let url_ = this.baseUrl + "/api/GovLocation/{location}";
        if (location === undefined || location === null)
            throw new Error("The parameter 'location' must be defined.");
        url_ = url_.replace("{location}", encodeURIComponent("" + location));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<GovLocationDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GovLocationDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<GovLocationDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GovLocationDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GovLocationDto[]>(<any>null);
    }
}

@Injectable()
export class GovbodyClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    create(command: CreateGovbodyCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Govbody";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get(location: string | null): Observable<GovbodyDto[]> {
        let url_ = this.baseUrl + "/api/Govbody/{location}";
        if (location === undefined || location === null)
            throw new Error("The parameter 'location' must be defined.");
        url_ = url_.replace("{location}", encodeURIComponent("" + location));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<GovbodyDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GovbodyDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<GovbodyDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GovbodyDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GovbodyDto[]>(<any>null);
    }
}

@Injectable()
export class WeatherForecastClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    get(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

export class ViewMeetingDto implements IViewMeetingDto {
    meetingId!: number;
    govbodyName?: string | undefined;
    locationName?: string | undefined;
    date?: string | undefined;
    topics?: ViewMeetingTopicDto[] | undefined;
    speakers?: ViewMeetingSpeakerDto[] | undefined;
    sections?: ViewMeetingSectionDto[] | undefined;

    constructor(data?: IViewMeetingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.meetingId = _data["meetingId"];
            this.govbodyName = _data["govbodyName"];
            this.locationName = _data["locationName"];
            this.date = _data["date"];
            if (Array.isArray(_data["topics"])) {
                this.topics = [] as any;
                for (let item of _data["topics"])
                    this.topics!.push(ViewMeetingTopicDto.fromJS(item));
            }
            if (Array.isArray(_data["speakers"])) {
                this.speakers = [] as any;
                for (let item of _data["speakers"])
                    this.speakers!.push(ViewMeetingSpeakerDto.fromJS(item));
            }
            if (Array.isArray(_data["sections"])) {
                this.sections = [] as any;
                for (let item of _data["sections"])
                    this.sections!.push(ViewMeetingSectionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ViewMeetingDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewMeetingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["meetingId"] = this.meetingId;
        data["govbodyName"] = this.govbodyName;
        data["locationName"] = this.locationName;
        data["date"] = this.date;
        if (Array.isArray(this.topics)) {
            data["topics"] = [];
            for (let item of this.topics)
                data["topics"].push(item.toJSON());
        }
        if (Array.isArray(this.speakers)) {
            data["speakers"] = [];
            for (let item of this.speakers)
                data["speakers"].push(item.toJSON());
        }
        if (Array.isArray(this.sections)) {
            data["sections"] = [];
            for (let item of this.sections)
                data["sections"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IViewMeetingDto {
    meetingId: number;
    govbodyName?: string | undefined;
    locationName?: string | undefined;
    date?: string | undefined;
    topics?: ViewMeetingTopicDto[] | undefined;
    speakers?: ViewMeetingSpeakerDto[] | undefined;
    sections?: ViewMeetingSectionDto[] | undefined;
}

export class ViewMeetingTopicDto implements IViewMeetingTopicDto {
    topicId!: number;
    name?: string | undefined;
    isExisting!: boolean;

    constructor(data?: IViewMeetingTopicDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.topicId = _data["topicId"];
            this.name = _data["name"];
            this.isExisting = _data["isExisting"];
        }
    }

    static fromJS(data: any): ViewMeetingTopicDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewMeetingTopicDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["topicId"] = this.topicId;
        data["name"] = this.name;
        data["isExisting"] = this.isExisting;
        return data; 
    }
}

export interface IViewMeetingTopicDto {
    topicId: number;
    name?: string | undefined;
    isExisting: boolean;
}

export class ViewMeetingSpeakerDto implements IViewMeetingSpeakerDto {
    speakerId!: number;
    name?: string | undefined;
    isExisting!: boolean;

    constructor(data?: IViewMeetingSpeakerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.speakerId = _data["speakerId"];
            this.name = _data["name"];
            this.isExisting = _data["isExisting"];
        }
    }

    static fromJS(data: any): ViewMeetingSpeakerDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewMeetingSpeakerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["speakerId"] = this.speakerId;
        data["name"] = this.name;
        data["isExisting"] = this.isExisting;
        return data; 
    }
}

export interface IViewMeetingSpeakerDto {
    speakerId: number;
    name?: string | undefined;
    isExisting: boolean;
}

export class ViewMeetingSectionDto implements IViewMeetingSectionDto {
    name?: string | undefined;
    topicDiscussions?: ViewMeetingTopicDiscussionDto[] | undefined;

    constructor(data?: IViewMeetingSectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["topicDiscussions"])) {
                this.topicDiscussions = [] as any;
                for (let item of _data["topicDiscussions"])
                    this.topicDiscussions!.push(ViewMeetingTopicDiscussionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ViewMeetingSectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewMeetingSectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.topicDiscussions)) {
            data["topicDiscussions"] = [];
            for (let item of this.topicDiscussions)
                data["topicDiscussions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IViewMeetingSectionDto {
    name?: string | undefined;
    topicDiscussions?: ViewMeetingTopicDiscussionDto[] | undefined;
}

export class ViewMeetingTopicDiscussionDto implements IViewMeetingTopicDiscussionDto {
    topicId!: number;
    talks?: ViewMeetingTalkDto[] | undefined;

    constructor(data?: IViewMeetingTopicDiscussionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.topicId = _data["topicId"];
            if (Array.isArray(_data["talks"])) {
                this.talks = [] as any;
                for (let item of _data["talks"])
                    this.talks!.push(ViewMeetingTalkDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ViewMeetingTopicDiscussionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewMeetingTopicDiscussionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["topicId"] = this.topicId;
        if (Array.isArray(this.talks)) {
            data["talks"] = [];
            for (let item of this.talks)
                data["talks"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IViewMeetingTopicDiscussionDto {
    topicId: number;
    talks?: ViewMeetingTalkDto[] | undefined;
}

export class ViewMeetingTalkDto implements IViewMeetingTalkDto {
    speakerId!: number;
    text?: string | undefined;

    constructor(data?: IViewMeetingTalkDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.speakerId = _data["speakerId"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): ViewMeetingTalkDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewMeetingTalkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["speakerId"] = this.speakerId;
        data["text"] = this.text;
        return data; 
    }
}

export interface IViewMeetingTalkDto {
    speakerId: number;
    text?: string | undefined;
}

export class EditMeetingDto implements IEditMeetingDto {
    sections?: string[] | undefined;
    topics?: string[] | undefined;
    talks?: EditMeetingTalkDto[] | undefined;
    lastEdit!: number;

    constructor(data?: IEditMeetingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sections"])) {
                this.sections = [] as any;
                for (let item of _data["sections"])
                    this.sections!.push(item);
            }
            if (Array.isArray(_data["topics"])) {
                this.topics = [] as any;
                for (let item of _data["topics"])
                    this.topics!.push(item);
            }
            if (Array.isArray(_data["talks"])) {
                this.talks = [] as any;
                for (let item of _data["talks"])
                    this.talks!.push(EditMeetingTalkDto.fromJS(item));
            }
            this.lastEdit = _data["lastEdit"];
        }
    }

    static fromJS(data: any): EditMeetingDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditMeetingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sections)) {
            data["sections"] = [];
            for (let item of this.sections)
                data["sections"].push(item);
        }
        if (Array.isArray(this.topics)) {
            data["topics"] = [];
            for (let item of this.topics)
                data["topics"].push(item);
        }
        if (Array.isArray(this.talks)) {
            data["talks"] = [];
            for (let item of this.talks)
                data["talks"].push(item.toJSON());
        }
        data["lastEdit"] = this.lastEdit;
        return data; 
    }
}

export interface IEditMeetingDto {
    sections?: string[] | undefined;
    topics?: string[] | undefined;
    talks?: EditMeetingTalkDto[] | undefined;
    lastEdit: number;
}

export class EditMeetingTalkDto implements IEditMeetingTalkDto {
    transcript?: string | undefined;
    confidence!: number;
    wordCount!: number;
    speakerName?: string | undefined;
    sectionName?: string | undefined;
    topicName?: string | undefined;
    showSetTopic!: boolean;
    words?: EditMeetingWordDto[] | undefined;

    constructor(data?: IEditMeetingTalkDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transcript = _data["transcript"];
            this.confidence = _data["confidence"];
            this.wordCount = _data["wordCount"];
            this.speakerName = _data["speakerName"];
            this.sectionName = _data["sectionName"];
            this.topicName = _data["topicName"];
            this.showSetTopic = _data["showSetTopic"];
            if (Array.isArray(_data["words"])) {
                this.words = [] as any;
                for (let item of _data["words"])
                    this.words!.push(EditMeetingWordDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EditMeetingTalkDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditMeetingTalkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transcript"] = this.transcript;
        data["confidence"] = this.confidence;
        data["wordCount"] = this.wordCount;
        data["speakerName"] = this.speakerName;
        data["sectionName"] = this.sectionName;
        data["topicName"] = this.topicName;
        data["showSetTopic"] = this.showSetTopic;
        if (Array.isArray(this.words)) {
            data["words"] = [];
            for (let item of this.words)
                data["words"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEditMeetingTalkDto {
    transcript?: string | undefined;
    confidence: number;
    wordCount: number;
    speakerName?: string | undefined;
    sectionName?: string | undefined;
    topicName?: string | undefined;
    showSetTopic: boolean;
    words?: EditMeetingWordDto[] | undefined;
}

export class EditMeetingWordDto implements IEditMeetingWordDto {
    word?: string | undefined;
    confidence!: number;
    startTime!: number;
    endTime!: number;
    wordNum!: number;
    speakerTag!: number;

    constructor(data?: IEditMeetingWordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.word = _data["word"];
            this.confidence = _data["confidence"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.wordNum = _data["wordNum"];
            this.speakerTag = _data["speakerTag"];
        }
    }

    static fromJS(data: any): EditMeetingWordDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditMeetingWordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["word"] = this.word;
        data["confidence"] = this.confidence;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["wordNum"] = this.wordNum;
        data["speakerTag"] = this.speakerTag;
        return data; 
    }
}

export interface IEditMeetingWordDto {
    word?: string | undefined;
    confidence: number;
    startTime: number;
    endTime: number;
    wordNum: number;
    speakerTag: number;
}

export class CreateGovLocationDto implements ICreateGovLocationDto {
    name?: string | undefined;
    type!: GovlocTypes;
    code?: string | undefined;
    parentLocation?: CreateGovLocationDto | undefined;

    constructor(data?: ICreateGovLocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.parentLocation = _data["parentLocation"] ? CreateGovLocationDto.fromJS(_data["parentLocation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateGovLocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGovLocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["code"] = this.code;
        data["parentLocation"] = this.parentLocation ? this.parentLocation.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateGovLocationDto {
    name?: string | undefined;
    type: GovlocTypes;
    code?: string | undefined;
    parentLocation?: CreateGovLocationDto | undefined;
}

export class CreateGovLocationCommand extends CreateGovLocationDto implements ICreateGovLocationCommand {

    constructor(data?: ICreateGovLocationCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CreateGovLocationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGovLocationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateGovLocationCommand extends ICreateGovLocationDto {
}

export enum GovlocTypes {
    City = 0,
    Town = 1,
    Borough = 2,
    Township = 3,
    County = 4,
    StateOrProvince = 5,
    Territory = 6,
    Country = 7,
}

export class GovLocationDto implements IGovLocationDto {
    name?: string | undefined;
    type!: GovlocTypes;
    code?: string | undefined;
    parentLocation?: GovLocation | undefined;

    constructor(data?: IGovLocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.parentLocation = _data["parentLocation"] ? GovLocation.fromJS(_data["parentLocation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GovLocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new GovLocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["code"] = this.code;
        data["parentLocation"] = this.parentLocation ? this.parentLocation.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGovLocationDto {
    name?: string | undefined;
    type: GovlocTypes;
    code?: string | undefined;
    parentLocation?: GovLocation | undefined;
}

export abstract class BaseEntity implements IBaseEntity {
    id!: number;

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IBaseEntity {
    id: number;
}

export class GovLocation extends BaseEntity implements IGovLocation {
    name?: string | undefined;
    type!: GovlocTypes;
    code?: string | undefined;
    parentLocation?: GovLocation | undefined;
    govbodies?: Govbody[] | undefined;
    languages?: Language[] | undefined;

    constructor(data?: IGovLocation) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.parentLocation = _data["parentLocation"] ? GovLocation.fromJS(_data["parentLocation"]) : <any>undefined;
            if (Array.isArray(_data["govbodies"])) {
                this.govbodies = [] as any;
                for (let item of _data["govbodies"])
                    this.govbodies!.push(Govbody.fromJS(item));
            }
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(Language.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GovLocation {
        data = typeof data === 'object' ? data : {};
        let result = new GovLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["code"] = this.code;
        data["parentLocation"] = this.parentLocation ? this.parentLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.govbodies)) {
            data["govbodies"] = [];
            for (let item of this.govbodies)
                data["govbodies"].push(item.toJSON());
        }
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGovLocation extends IBaseEntity {
    name?: string | undefined;
    type: GovlocTypes;
    code?: string | undefined;
    parentLocation?: GovLocation | undefined;
    govbodies?: Govbody[] | undefined;
    languages?: Language[] | undefined;
}

export class AuditEntity extends BaseEntity implements IAuditEntity {
    createdBy?: string | undefined;
    created!: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;

    constructor(data?: IAuditEntity) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdBy = _data["createdBy"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuditEntity {
        data = typeof data === 'object' ? data : {};
        let result = new AuditEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdBy"] = this.createdBy;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IAuditEntity extends IBaseEntity {
    createdBy?: string | undefined;
    created: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;
}

export class Govbody extends AuditEntity implements IGovbody {
    id!: number;
    name?: string | undefined;
    longName?: string | undefined;
    parentLocation?: GovLocation | undefined;
    meetings?: Meeting[] | undefined;
    topics?: Topic[] | undefined;
    scheduledMeetings?: ScheduledMeeting[] | undefined;

    constructor(data?: IGovbody) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.longName = _data["longName"];
            this.parentLocation = _data["parentLocation"] ? GovLocation.fromJS(_data["parentLocation"]) : <any>undefined;
            if (Array.isArray(_data["meetings"])) {
                this.meetings = [] as any;
                for (let item of _data["meetings"])
                    this.meetings!.push(Meeting.fromJS(item));
            }
            if (Array.isArray(_data["topics"])) {
                this.topics = [] as any;
                for (let item of _data["topics"])
                    this.topics!.push(Topic.fromJS(item));
            }
            if (Array.isArray(_data["scheduledMeetings"])) {
                this.scheduledMeetings = [] as any;
                for (let item of _data["scheduledMeetings"])
                    this.scheduledMeetings!.push(ScheduledMeeting.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Govbody {
        data = typeof data === 'object' ? data : {};
        let result = new Govbody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["longName"] = this.longName;
        data["parentLocation"] = this.parentLocation ? this.parentLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.meetings)) {
            data["meetings"] = [];
            for (let item of this.meetings)
                data["meetings"].push(item.toJSON());
        }
        if (Array.isArray(this.topics)) {
            data["topics"] = [];
            for (let item of this.topics)
                data["topics"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledMeetings)) {
            data["scheduledMeetings"] = [];
            for (let item of this.scheduledMeetings)
                data["scheduledMeetings"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGovbody extends IAuditEntity {
    id: number;
    name?: string | undefined;
    longName?: string | undefined;
    parentLocation?: GovLocation | undefined;
    meetings?: Meeting[] | undefined;
    topics?: Topic[] | undefined;
    scheduledMeetings?: ScheduledMeeting[] | undefined;
}

export class Meeting extends BaseEntity implements IMeeting {
    name?: string | undefined;
    date!: Date;
    length!: number;
    govbodyId!: number;
    language?: string | undefined;
    sourceFilename?: string | undefined;
    sourceType!: SourceType;
    workStatus!: WorkStatus;
    approved!: boolean;
    sections?: Section[] | undefined;

    constructor(data?: IMeeting) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.length = _data["length"];
            this.govbodyId = _data["govbodyId"];
            this.language = _data["language"];
            this.sourceFilename = _data["sourceFilename"];
            this.sourceType = _data["sourceType"];
            this.workStatus = _data["workStatus"];
            this.approved = _data["approved"];
            if (Array.isArray(_data["sections"])) {
                this.sections = [] as any;
                for (let item of _data["sections"])
                    this.sections!.push(Section.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Meeting {
        data = typeof data === 'object' ? data : {};
        let result = new Meeting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["length"] = this.length;
        data["govbodyId"] = this.govbodyId;
        data["language"] = this.language;
        data["sourceFilename"] = this.sourceFilename;
        data["sourceType"] = this.sourceType;
        data["workStatus"] = this.workStatus;
        data["approved"] = this.approved;
        if (Array.isArray(this.sections)) {
            data["sections"] = [];
            for (let item of this.sections)
                data["sections"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IMeeting extends IBaseEntity {
    name?: string | undefined;
    date: Date;
    length: number;
    govbodyId: number;
    language?: string | undefined;
    sourceFilename?: string | undefined;
    sourceType: SourceType;
    workStatus: WorkStatus;
    approved: boolean;
    sections?: Section[] | undefined;
}

export enum SourceType {
    Recording = 0,
    Transcript = 1,
}

export enum WorkStatus {
    Receiving = 0,
    Received = 1,
    Processing = 2,
    Processed = 3,
    Transcribing = 4,
    Transcribed = 5,
    Editing = 6,
    Edited = 7,
    Tagging = 8,
    Tagged = 9,
    Viewing = 10,
    Viewed = 11,
    Loading = 12,
    Loaded = 13,
    Alerting = 14,
    Alerted = 15,
}

export class Section extends BaseEntity implements ISection {
    name?: string | undefined;
    meetingId!: number;
    sequence!: number;
    topicDiscussions?: TopicDiscussion[] | undefined;

    constructor(data?: ISection) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.meetingId = _data["meetingId"];
            this.sequence = _data["sequence"];
            if (Array.isArray(_data["topicDiscussions"])) {
                this.topicDiscussions = [] as any;
                for (let item of _data["topicDiscussions"])
                    this.topicDiscussions!.push(TopicDiscussion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Section {
        data = typeof data === 'object' ? data : {};
        let result = new Section();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["meetingId"] = this.meetingId;
        data["sequence"] = this.sequence;
        if (Array.isArray(this.topicDiscussions)) {
            data["topicDiscussions"] = [];
            for (let item of this.topicDiscussions)
                data["topicDiscussions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISection extends IBaseEntity {
    name?: string | undefined;
    meetingId: number;
    sequence: number;
    topicDiscussions?: TopicDiscussion[] | undefined;
}

export class TopicDiscussion extends BaseEntity implements ITopicDiscussion {
    topic?: Topic | undefined;
    sectionId!: number;
    sequence!: number;
    talks?: Talk[] | undefined;

    constructor(data?: ITopicDiscussion) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.topic = _data["topic"] ? Topic.fromJS(_data["topic"]) : <any>undefined;
            this.sectionId = _data["sectionId"];
            this.sequence = _data["sequence"];
            if (Array.isArray(_data["talks"])) {
                this.talks = [] as any;
                for (let item of _data["talks"])
                    this.talks!.push(Talk.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TopicDiscussion {
        data = typeof data === 'object' ? data : {};
        let result = new TopicDiscussion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["topic"] = this.topic ? this.topic.toJSON() : <any>undefined;
        data["sectionId"] = this.sectionId;
        data["sequence"] = this.sequence;
        if (Array.isArray(this.talks)) {
            data["talks"] = [];
            for (let item of this.talks)
                data["talks"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ITopicDiscussion extends IBaseEntity {
    topic?: Topic | undefined;
    sectionId: number;
    sequence: number;
    talks?: Talk[] | undefined;
}

export class Topic implements ITopic {
    id!: number;
    name?: string | undefined;
    categories?: Category[] | undefined;
    governmentBodyId!: number;

    constructor(data?: ITopic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(Category.fromJS(item));
            }
            this.governmentBodyId = _data["governmentBodyId"];
        }
    }

    static fromJS(data: any): Topic {
        data = typeof data === 'object' ? data : {};
        let result = new Topic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["governmentBodyId"] = this.governmentBodyId;
        return data; 
    }
}

export interface ITopic {
    id: number;
    name?: string | undefined;
    categories?: Category[] | undefined;
    governmentBodyId: number;
}

export class Category implements ICategory {
    id!: number;
    name?: string | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICategory {
    id: number;
    name?: string | undefined;
}

export class Talk extends BaseEntity implements ITalk {
    text?: string | undefined;
    speaker?: Speaker | undefined;
    topicDiscussionId!: number;
    sequence!: number;

    constructor(data?: ITalk) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.text = _data["text"];
            this.speaker = _data["speaker"] ? Speaker.fromJS(_data["speaker"]) : <any>undefined;
            this.topicDiscussionId = _data["topicDiscussionId"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): Talk {
        data = typeof data === 'object' ? data : {};
        let result = new Talk();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["speaker"] = this.speaker ? this.speaker.toJSON() : <any>undefined;
        data["topicDiscussionId"] = this.topicDiscussionId;
        data["sequence"] = this.sequence;
        super.toJSON(data);
        return data; 
    }
}

export interface ITalk extends IBaseEntity {
    text?: string | undefined;
    speaker?: Speaker | undefined;
    topicDiscussionId: number;
    sequence: number;
}

export class Speaker extends BaseEntity implements ISpeaker {
    name?: string | undefined;
    meetingId!: number;

    constructor(data?: ISpeaker) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.meetingId = _data["meetingId"];
        }
    }

    static fromJS(data: any): Speaker {
        data = typeof data === 'object' ? data : {};
        let result = new Speaker();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["meetingId"] = this.meetingId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISpeaker extends IBaseEntity {
    name?: string | undefined;
    meetingId: number;
}

export class ScheduledMeeting extends BaseEntity implements IScheduledMeeting {
    date!: Date;

    constructor(data?: IScheduledMeeting) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ScheduledMeeting {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduledMeeting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IScheduledMeeting extends IBaseEntity {
    date: Date;
}

export class Language extends BaseEntity implements ILanguage {
    name?: string | undefined;

    constructor(data?: ILanguage) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Language {
        data = typeof data === 'object' ? data : {};
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        super.toJSON(data);
        return data; 
    }
}

export interface ILanguage extends IBaseEntity {
    name?: string | undefined;
}

export class CreateGovbodyDto implements ICreateGovbodyDto {
    name?: string | undefined;
    longName?: string | undefined;
    parentLocation?: GovLocationDto | undefined;

    constructor(data?: ICreateGovbodyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.longName = _data["longName"];
            this.parentLocation = _data["parentLocation"] ? GovLocationDto.fromJS(_data["parentLocation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateGovbodyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGovbodyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["longName"] = this.longName;
        data["parentLocation"] = this.parentLocation ? this.parentLocation.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateGovbodyDto {
    name?: string | undefined;
    longName?: string | undefined;
    parentLocation?: GovLocationDto | undefined;
}

export class CreateGovbodyCommand extends CreateGovbodyDto implements ICreateGovbodyCommand {

    constructor(data?: ICreateGovbodyCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CreateGovbodyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGovbodyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateGovbodyCommand extends ICreateGovbodyDto {
}

export class GovbodyDto implements IGovbodyDto {
    name?: string | undefined;
    longName?: string | undefined;
    parentLocation?: GovLocationDto | undefined;
    meetings?: ViewMeetingDto[] | undefined;
    topics?: ViewMeetingTopicDto[] | undefined;
    scheduledMeetings?: ScheduledMeetingDto[] | undefined;

    constructor(data?: IGovbodyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.longName = _data["longName"];
            this.parentLocation = _data["parentLocation"] ? GovLocationDto.fromJS(_data["parentLocation"]) : <any>undefined;
            if (Array.isArray(_data["meetings"])) {
                this.meetings = [] as any;
                for (let item of _data["meetings"])
                    this.meetings!.push(ViewMeetingDto.fromJS(item));
            }
            if (Array.isArray(_data["topics"])) {
                this.topics = [] as any;
                for (let item of _data["topics"])
                    this.topics!.push(ViewMeetingTopicDto.fromJS(item));
            }
            if (Array.isArray(_data["scheduledMeetings"])) {
                this.scheduledMeetings = [] as any;
                for (let item of _data["scheduledMeetings"])
                    this.scheduledMeetings!.push(ScheduledMeetingDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GovbodyDto {
        data = typeof data === 'object' ? data : {};
        let result = new GovbodyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["longName"] = this.longName;
        data["parentLocation"] = this.parentLocation ? this.parentLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.meetings)) {
            data["meetings"] = [];
            for (let item of this.meetings)
                data["meetings"].push(item.toJSON());
        }
        if (Array.isArray(this.topics)) {
            data["topics"] = [];
            for (let item of this.topics)
                data["topics"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledMeetings)) {
            data["scheduledMeetings"] = [];
            for (let item of this.scheduledMeetings)
                data["scheduledMeetings"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGovbodyDto {
    name?: string | undefined;
    longName?: string | undefined;
    parentLocation?: GovLocationDto | undefined;
    meetings?: ViewMeetingDto[] | undefined;
    topics?: ViewMeetingTopicDto[] | undefined;
    scheduledMeetings?: ScheduledMeetingDto[] | undefined;
}

export class ScheduledMeetingDto implements IScheduledMeetingDto {

    constructor(data?: IScheduledMeetingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ScheduledMeetingDto {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduledMeetingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IScheduledMeetingDto {
}

export class WeatherForecast implements IWeatherForecast {
    date!: Date;
    temperatureC!: number;
    temperatureF!: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date: Date;
    temperatureC: number;
    temperatureF: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

}